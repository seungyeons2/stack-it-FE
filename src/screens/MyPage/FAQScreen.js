// FAQScreen.js
import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  ActivityIndicator,
  TouchableOpacity,
} from 'react-native';

// üé® ÌÖåÎßà ÌõÖ import
import { useTheme } from '../../utils/ThemeContext';

const dummyFaqs = [
  {
    id: 1,
    question: 'Ï¥àÍ∏∞ Ìà¨Ïûê Í∏àÏï°ÏùÄ ÏñºÎßàÏù∏Í∞ÄÏöî?',
    answer: 'Ï¥àÍ∏∞ ÏûêÏÇ∞ÏùÄ Í∏∞Î≥∏Ï†ÅÏúºÎ°ú 100Îßå ÏõêÏúºÎ°ú ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÏúºÎ©∞, ÌïôÏäµ ÌÉ≠Í≥º ÌñÑÌñÑÏù¥ÎÑ§ Ìï¥Î∞îÎùºÍ∏∞Ïî® ÎÜçÏû•Ïùò Í∏∞Îä•ÏùÑ ÌÜµÌï¥ÏÑú ÏòàÏàòÍ∏àÏùÑ ÏñªÏúºÏã§ Ïàò ÏûàÏäµÎãàÎã§.',
  },
  {
    id: 2,
    question: 'Ïã§ÏãúÍ∞Ñ Ï£ºÍ∞ÄÎ•º ÏÇ¨Ïö©ÌïòÎÇòÏöî?',
    answer: 'ÌïúÍµ≠Ìà¨ÏûêÏ¶ùÍ∂åÏóêÏÑú Ï†úÍ≥µÌïòÎäî apiÎ•º ÌÜµÌï¥ Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞Î•º Ï†úÍ≥µÎê©ÎãàÎã§.',
  },
  {
    id: 3,
    question: 'Îß§Îß§Îäî Ïñ∏Ï†úÎì†ÏßÄ Í∞ÄÎä•ÌïúÍ∞ÄÏöî?',
    answer: 'Í±∞ÎûòÎäî Ïã§Ï†ú Ï£ºÏãù ÏãúÏû• ÏãúÍ∞ÑÍ≥º Îã¨Î¶¨ Ìï≠ÏÉÅ Í∞ÄÎä•Ìï©ÎãàÎã§. Ïû• Ïô∏ ÏãúÍ∞ÑÏóêÎèÑ Ï¶âÏãú Ï£ºÎ¨∏ÌïòÏã§ Ïàò ÏûàÏäµÎãàÎã§.',
  },
  {
    id: 4,
    question: 'Îß§ÏàòÏôÄ Îß§ÎèÑ Î∞©Î≤ïÏù¥ Í∂ÅÍ∏àÌï¥Ïöî.',
    answer: 'Ï¢ÖÎ™©ÏùÑ Í≤ÄÏÉâÌïú ÌõÑ, Îß§Ïàò ÎòêÎäî Îß§ÎèÑ Î≤ÑÌäºÏùÑ ÎàåÎü¨ ÏàòÎüâÏùÑ ÏûÖÎ†•ÌïòÍ≥† Ï£ºÎ¨∏ÏùÑ Ïã§ÌñâÌïòÎ©¥ Îê©ÎãàÎã§.',
  },
  {
    id: 5,
    question: 'Î™®Ïùò Ìà¨ÏûêÎäî Ïã§Ï†ú ÎèàÏù¥ ÎìúÎÇòÏöî?',
    answer: 'ÏïÑÎãàÏöî! Î™®Ïùò Ìà¨ÏûêÎäî Í∞ÄÏÉÅÏùò ÏûêÏÇ∞ÏùÑ ÌôúÏö©ÌïòÎäî ÏãúÎÆ¨Î†àÏù¥ÏÖòÏúºÎ°ú, Ïã§Ï†ú ÎèàÏù¥ Îì§ÏßÄ ÏïäÏäµÎãàÎã§.',
  },
  {
    id: 6,
    question: 'Î™®Ïùò Ìà¨ÏûêÎ°ú ÏàòÏùµÏù¥ ÎÇòÎ©¥ ÌòÑÍ∏àÏúºÎ°ú Î∞õÏùÑ Ïàò ÏûàÎÇòÏöî?',
    answer: 'Î™®Ïùò Ìà¨ÏûêÎäî ÌïôÏäµÏö© Í∏∞Îä•Ïù¥Í∏∞ ÎïåÎ¨∏Ïóê Ïã§Ï†ú ÏàòÏùµÏù¥ÎÇò ÏÜêÏã§ÏùÄ Î∞úÏÉùÌïòÏßÄ ÏïäÏúºÎ©∞, ÌòÑÍ∏àÏúºÎ°ú ÍµêÌôòÎêòÏßÄ ÏïäÏäµÎãàÎã§.',
  },
  //   {
//     id: 7,
//     question: 'Îû≠ÌÇπÏùÄ Ïñ¥ÎñªÍ≤å Í≥ÑÏÇ∞ÎêòÎÇòÏöî?',
//     answer: 'Îû≠ÌÇπÏùÄ Ï†ÑÏ≤¥ ÏÇ¨Ïö©Ïûê Ï§ë ÏàòÏùµÎ•†ÏùÑ Í∏∞Ï§ÄÏúºÎ°ú Ïã§ÏãúÍ∞Ñ ÏßëÍ≥ÑÎêòÎ©∞, Ïùº/Ï£º/Ïõî Îã®ÏúÑÎ°ú ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.',
//   },

];

const FAQScreen = ({ navigation }) => {
  const { theme } = useTheme(); // üé® ÌòÑÏû¨ ÌÖåÎßà Ï†ÅÏö©

  const [loading, setLoading] = useState(true);
  const [faqs, setFaqs] = useState([]);
  const [expandedId, setExpandedId] = useState(null);

  useEffect(() => {
    const loadFaqs = async () => {
      setLoading(true);
      try {
        // APIÏóêÏÑú Î∂àÎü¨Ïò§Îäî Í≤ΩÏö∞
        // const res = await fetch('https://your-api/faq');
        // const data = await res.json();
        setFaqs(dummyFaqs);
      } catch (e) {
        console.error('FAQ Î°úÎî© Ïã§Ìå®:', e);
      } finally {
        setLoading(false);
      }
    };
    loadFaqs();
  }, []);

  const toggleExpand = (id) => {
    setExpandedId(expandedId === id ? null : id);
  };

  if (loading) {
    return (
      <View
        style={[
          styles.container,
          { backgroundColor: theme.background.primary, justifyContent: 'center' },
        ]}
      >
        <ActivityIndicator size="large" color={theme.accent.primary} />
      </View>
    );
  }

  return (
    <View style={[styles.container, { backgroundColor: theme.background.primary }]}>
      {/* Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº */}
      <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>
        <Text style={[styles.backText, { color: theme.accent.primary }]}>{'<'}</Text>
      </TouchableOpacity>

      <Text style={[styles.title, { color: theme.text.primary }]}>ÏûêÏ£º Î¨ªÎäî ÏßàÎ¨∏</Text>

      <ScrollView contentContainerStyle={styles.scroll}>
        {faqs.map((faq) => (
          <TouchableOpacity
            key={faq.id}
            onPress={() => toggleExpand(faq.id)}
            style={[
              styles.faqBox,
              {
                backgroundColor: theme.background.card,
                borderColor: theme.border.medium,
                borderWidth: 1,
              },
            ]}
          >
            <Text style={[styles.faqQuestion, { color: theme.text.primary }]}>
              {faq.question}
            </Text>
            {expandedId === faq.id && (
              <Text style={[styles.faqAnswer, { color: theme.text.secondary }]}>
                {faq.answer}
              </Text>
            )}
          </TouchableOpacity>
        ))}
      </ScrollView>
    </View>
  );
};

export default FAQScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingHorizontal: 30,
    paddingTop: 60,
  },
  backButton: {
    position: 'absolute',
    top: 50,
    left: 20,
    zIndex: 10,
  },
  backText: {
    fontSize: 36,
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  scroll: {
    paddingBottom: 30,
  },
  faqBox: {
    padding: 16,
    borderRadius: 10,
    marginBottom: 12,
  },
  faqQuestion: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  faqAnswer: {
    marginTop: 10,
    fontSize: 15,
    lineHeight: 22,
  },
});
